esphome:
  name: cat-spray-1
  friendly_name: cat-spray-1
  platformio_options:
    build_flags: "-DBOARD_HAS_PSRAM"
    board_build.arduino.memory_type: qio_opi
  includes:
    - wifi_icon.h

psram:

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "YOUR-KEY-HERE"

ota:
  - platform: esphome
    password: "PASSWORD"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Cat-Spray-1 Fallback Hotspot"
    password: "PASSWORD"

captive_portal:




servo:
  - id: my_servo
    output: servo_output

output:
    # The servo out
  - platform: ledc
    pin: GPIO14
    id: servo_output
    frequency: 50 Hz
    channel: 0

  # The mini RGB led out
  - platform: ledc
    id: output_red
    pin: GPIO5
    channel: 5
  - platform: ledc
    id: output_green
    pin: GPIO6
    channel: 6
  - platform: ledc
    id: output_blue
    pin: GPIO7
    channel: 7

  # The tft screen backlight out
  - platform: ledc
    pin: GPIO8
    id: backlight
    channel: 4

  # The buzzer out
  - platform: ledc
    pin: GPIO10
    id: buzzer_output
    inverted: True
    frequency: 1000 Hz
    channel: 3

number:
    # Just to test the servo from HA
  - platform: template
    name: Servo Control
    min_value: 0
    initial_value: 0
    max_value: 70
    step: 1
    optimistic: true
    set_action:
      then:
        - servo.write:
            id: my_servo
            level: !lambda 'return x / 100.0;'

    # The tft backlight from HA
  - platform: template
    name: "catspray ecran slider"
    id: "CatSpraySlider"
    step: 0.1
    min_value: 0
    max_value: 1
    restore_value: true
    mode: slider
    optimistic: true
    set_action:
      then:
        - lambda:  id(backlight).set_level(x);
    #on_value:
    #  then:
    #    - component.update: my_display


  - platform: ld2410
    timeout:
      name: Timeout
    light_threshold:
      name: Light Threshold
    max_move_distance_gate:
      name: Max Move Distance Gate
    max_still_distance_gate:
      name: Max Still Distance Gate
    g0:
      move_threshold:
        name: g0 move threshold
      still_threshold:
        name: g0 still threshold
    g1:
      move_threshold:
        name: g1 move threshold
      still_threshold:
        name: g1 still threshold
    g2:
      move_threshold:
        name: g2 move threshold
      still_threshold:
        name: g2 still threshold
    g3:
      move_threshold:
        name: g3 move threshold
      still_threshold:
        name: g3 still threshold
    g4:
      move_threshold:
        name: g4 move threshold
      still_threshold:
        name: g4 still threshold
    g5:
      move_threshold:
        name: g5 move threshold
      still_threshold:
        name: g5 still threshold
    g6:
      move_threshold:
        name: g6 move threshold
      still_threshold:
        name: g6 still threshold
    g7:
      move_threshold:
        name: g7 move threshold
      still_threshold:
        name: g7 still threshold
    g8:
      move_threshold:
        name: g8 move threshold
      still_threshold:
        name: g8 still threshold


    



select:
  - platform: ld2410
    distance_resolution:
      name: Distance Resolution
    baud_rate:
      name: Baud Rate
    light_function:
      name: Light Function
    out_pin_level:
      name: Out Pin Level


binary_sensor:
  - platform: gpio
    pin: GPIO4
    name: "Binary Touch Sensor"
    device_class: power
    on_press: 
      then:
        - switch.toggle: actif

  - platform: gpio
    name: "PIR Motion"
    device_class: motion
    id: pir
    pin: 
      number: GPIO13
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_off: 3s  #2s is hardware default -- too frequent for my tastes
    


    
  - platform: template
    name: "actif_ok"
    id: actif_ok

  - platform: template
    name: "presece+motion"
    id: presence_et_motion
    device_class: motion
    lambda: |-
      if (id(pir).state && id(ld2410_presence).state) {
        return true;
      } else {
        return false;
      }
    on_state:
      then:
        lambda: |-
          if(id(actif_ok).state){
          if(x){ id(spray).execute(); }
          }  
          

  - platform: ld2410
    has_target:
      name: LD2410 Presence
      id: ld2410_presence
    has_moving_target:
      name: Moving Target
    has_still_target:
      name: Still Target
    out_pin_presence_status:
      name: Out Pin Presence Status  


light:
  - platform: rgb
    name: "RGB LED"
    red: output_red
    green: output_green
    blue: output_blue
    id: led

  - platform: monochromatic
    output: backlight
    name: "Backlight"
    id: Ecran
    restore_mode: RESTORE_DEFAULT_ON
    default_transition_length: 1s


sensor:

  - platform: wifi_signal # Reports the WiFi signal strength in %
    name: catspray_wifi
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    id: wifi_signal_pct
    update_interval: 60s
    entity_category: "diagnostic" 


  - platform: ld2410
    light:
      name: Light
    moving_distance:
      name : Moving Distance
    still_distance:
      name: Still Distance
    moving_energy:
      name: Move Energy
    still_energy:
      name: Still Energy
    detection_distance:
      name: Detection Distance
    g0:
      move_energy:
        name: g0 move energy
      still_energy:
        name: g0 still energy
    g1:
      move_energy:
        name: g1 move energy
      still_energy:
        name: g1 still energy
    g2:
      move_energy:
        name: g2 move energy
      still_energy:
        name: g2 still energy
    g3:
      move_energy:
        name: g3 move energy
      still_energy:
        name: g3 still energy
    g4:
      move_energy:
        name: g4 move energy
      still_energy:
        name: g4 still energy
    g5:
      move_energy:
        name: g5 move energy
      still_energy:
        name: g5 still energy
    g6:
      move_energy:
        name: g6 move energy
      still_energy:
        name: g6 still energy
    g7:
      move_energy:
        name: g7 move energy
      still_energy:
        name: g7 still energy
    g8:
      move_energy:
        name: g8 move energy
      still_energy:
        name: g8 still energy

  - platform: homeassistant
    # You have to create an helper (counter) within HA and put here its entity ID
    entity_id: counter.catspray_sprays_jour
    name: nb_sprays_jour
    id: nb_sprays
    internal: false
    accuracy_decimals: 0


switch:
  - platform: restart
    name: "Global restart"
    id: catspray_restart

    # Just to test the buzzer from HA
  - platform: output 
    name: 'buzzer'
    id: buzzer
    output: buzzer_output
    on_turn_on: 
      then:
        - script.execute: test

    on_turn_off:
      then:
        - output.turn_off: buzzer_output

  - platform: template
    name: "actif"
    id: actif
    optimistic: true
    assumed_state: True
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - script.execute: activation
      - light.turn_on:
          id: led
          brightness: 50%
          red: 100%
          green: 0
          blue: 0
      - delay: 10s
      - binary_sensor.template.publish:
          id: actif_ok
          state: ON
    
    turn_off_action:
      - script.execute: desactivation
      - light.turn_on:
          id: led
          brightness: 30%
          red: 0
          green: 100%
          blue: 0
      - binary_sensor.template.publish:
          id: actif_ok
          state: OFF


  - platform: ld2410
    engineering_mode:
      name: Engineering Mode
    bluetooth:
      name: Control Bluetooth

rtttl:
  # Example tones : https://codebender.cc/sketch:109888#RTTTL%20Songs.ino
  output: buzzer_output
  id: my_rtttl


font:
  - file: 'Verdana.ttf'
    id: roboto
    size: 35
    glyphs: '!"%()+,-_.:/°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzåäöéàµ[]'
  - file: 'Verdana.ttf'
    id: roboto_small
    size: 19
    glyphs: '!"%()+,-_.:/°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzåäöéàµ'
  - file: 'materialdesignicons-webfont.ttf'
    id: icon_font
    size: 155
    glyphs:
      - "\U000F02D5" # heart
      - "\U000F0514" # thumbs up
      - "\U000F0512" # thumbs down
      - "\U000F1238" # alert
      - "\U000F0AE0" # spray1
      - "\U000F0665" # spray2


  - file: 'Verdana.ttf'
    id: roboto2
    size: 20
    glyphs: '!"%()+,-_.:/°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzåäöéàµ'

  - file: 'materialdesignicons-webfont.ttf'
    id: icon_font_wifi
    size: 25
    glyphs:
      - "\U000F05A9" # wifi-4
      - "\U000F0925" # wifi-3 
      - "\U000F0922" # wifi-2
      - "\U000F091F" # wifi-1
      - "\U000F0920" # Low-wifi
      - "\U000F092B" # No-wifi
      - "\U000F058E" # humidity
      - "\U000F050F" # temperature
      - "\U000F00DE" # brightness


  - file: 'materialdesignicons-webfont.ttf'
    id: icon_font_small
    size: 50
    glyphs:
      - "\U000F0D91" # motion
      - "\U000F1435" # motion-off
      - "\U000F00DE" # brightness





  - file: 'modern.ttf'
    id: modern
    size: 60
    glyphs: '!"%()+,-_.:/°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñáú'
  - file: 'fonts/modern.ttf'
    id: modern2
    size: 30
    glyphs: '!"%()+,-_.:/°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñáú'
  - file: 'fonts/modern.ttf'
    id: modern3
    size: 40
    glyphs: '!"%()+,-_.:/°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñáú'

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 5%
    green: 5%
    blue: 90%
  - id: my_gray
    red: 80%
    green: 80%
    blue: 80%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%
  - id: gris_fonce
    red: 30%
    green: 30%
    blue: 30%
  - id: my_orange
    red_int: 255
    green_int: 165
    blue_int: 0
    white_int: 0
  - id: color_text_white
    red: 100%
    green: 100%
    blue: 100%
  - id: color_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_pink
    red_int: 255
    green_int: 179
    blue_int: 186
    white_int: 0
  - id: my_blue_light
    red_int: 186
    green_int: 225
    blue_int: 255
    white_int: 0
  - id: my_yellow_light
    red_int: 255
    green_int: 223
    blue_int: 186
    white_int: 0
  - id: my_tv_green
    red_int: 0
    green_int: 255
    blue_int: 32
    white_int: 0


spi:
  clk_pin: GPIO17
  mosi_pin: GPIO18


display:
  - platform: st7789v
    model: Custom
    id: my_display
    dc_pin: GPIO15
    reset_pin: GPIO16
    update_interval: 1s
    height: 240
    width: 240
    offset_height: 0
    offset_width: 0
    spi_mode: mode3
    rotation: 180
    


    lambda: |-
      // WIFI Icon
      it.printf(210, 5, id(icon_font_wifi), id(color_text_white), "%s", wifi_icon(id(wifi_signal_pct).state));

      auto dynamic_color = Color(0, 255, 0);
      //Dynamic color
      if(id(actif).state) {
      dynamic_color = Color(255, 0, 0);
      }
      else{
      dynamic_color = Color(0, 255, 0); 
      }

      auto motion_color = Color(0, 0, 255);
      //motion color
      if(id(presence_et_motion).state) {
      motion_color = Color(255, 0, 0);
      }
      else{
      motion_color = Color(0, 0, 255); 
      }


      if (id(actif).state) {
      it.print(120, 20, id(icon_font), dynamic_color, TextAlign::CENTER_HORIZONTAL, "\U000F0665");
      } else {
      it.print(120, 20, id(icon_font), dynamic_color, TextAlign::CENTER_HORIZONTAL, "\U000F0AE0");
      }

      if(id(presence_et_motion).state) {
      it.print(180, 180, id(icon_font_small), motion_color,  "\U000F0D91");
      }
      else
      {
      it.print(180, 180, id(icon_font_small), motion_color,  "\U000F1435");
      }

      if (id(nb_sprays).has_state()) {
      it.printf(10, 180, id(roboto),  "[ %.0f ]",  id(nb_sprays).state);
      }
      


script:
  - id: detection
    then:
      - rtttl.play: 's:d=4,o=7,b=125:4b,p,4b,p,1b,16p,16p,16p,4'
  - id: activation
    then:
      - rtttl.play: 's:d=4,o=5,b=125:16b6,p,16b,p,16b6,p,16b,p,4b6,p,4b6,p,1b6'
  - id: desactivation
    then:
      - rtttl.play: 's:d=4,o=5,b=125:16b6,8p,16b6,4p,8b5'
  - id: test
    then:
      - rtttl.play: 's:d=4,o=5,b=125:32b4'
  - id: spray
    then:
      - rtttl.play: 's:d=4,o=5,b=125:2b7'
      - delay: 1s
      - servo.write:
          id: my_servo
          level: 40.0%
      - delay: 500ms
      - servo.write:
          id: my_servo
          level: 0.0%
      - homeassistant.service:
          service: counter.increment
          data:
            entity_id: counter.catspray_sprays_jour



ld2410:

uart:
  id: uart_ld2410
  tx_pin: GPIO1
  rx_pin: GPIO2
  baud_rate: 256000
  parity: NONE
  stop_bits: 1



button:
  - platform: ld2410
    factory_reset:
      name: LD2410 Factory Reset
    restart:
      name: LD2410 Restart
    query_params:
      name: LD2410 Query Params


text_sensor:
  - platform: ld2410
    version:
      name: LD2410 Firmware Version
    mac_address:
      name: LD2410 MAC